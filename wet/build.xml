<project name="aelua" default="war">

<taskdef resource="net/sf/antcontrib/antlib.xml" >
  <classpath> <pathelement location="../aelua/class/ant-contrib.jar"/> </classpath>
</taskdef>

  <property name="appengine.sdk" location="../appengine-java-sdk"/>

  <!-- Check that the SDK value is set and seems sane, so we can give a nicer error if not.  -->
  <fail message="Please define the appengine.sdk property to point to your SDK directory" >
    <condition>
      <not> <and>
          <isset property="appengine.sdk"/>
          <available file="${appengine.sdk}/config/user/ant-macros.xml"/>
      </and> </not>
    </condition>
  </fail>
  <fail message="this project requires aelua in the ../aelua directory" >
    <condition>
      <not> <and>
          <available file="../aelua/build.xml"/>
      </and> </not>
    </condition>
  </fail>

  <!-- Pick up the Ant macros and taskdefs for App Engine -->
  <import file="${appengine.sdk}/config/user/ant-macros.xml"/>


  <!-- Remote debug port for dev_appserver -->
  <property name="debug.port" value="5005"/>

  <!-- HTTP port for dev_appserver -->
  <property name="http.port" value="8080"/>

  <!-- Name of log file to write logs to -->
  <property name="log.file" value="app.log"/>

  <!-- Number of days worth of logs to retrieve -->
  <property name="log.days" value="2"/>

  <property name="war.dir" location=".war"/>

  <available file="../jslua/war" type="dir" property="jslua.dir.present"/>

  <target name="copy.jslua" description="copy prebuilt jslua files"  if="jslua.dir.present" >
    <copy todir="${war.dir}/JsLua" includeEmptyDirs="false">
      <fileset dir="../jslua/war/JsLua">          <exclude name="**/.svn/**"/> </fileset>
    </copy>
    <copy todir="${war.dir}/luac" includeEmptyDirs="false">
      <fileset dir="../jslua/html/luac">          <exclude name="**/.svn/**"/> </fileset>
    </copy>
    <copy todir="${war.dir}/js" includeEmptyDirs="false">
      <fileset dir="../jslua/html/js">          <exclude name="**/.svn/**"/> </fileset>
    </copy>
  </target>

  <target name="war" depends="compile" description="Assemble the application directory">
    <mkdir dir="${war.dir}/WEB-INF"/>
    <copy todir="${war.dir}" includeEmptyDirs="false" >
      <fileset dir="html">          <exclude name="**/.svn/**"/> </fileset>
    </copy>
    <copy todir="${war.dir}" includeEmptyDirs="false" overwrite="true">
      <fileset dir="html">
        <include name="lua/*"/>
        <include name="WEB-INF/*"/>
      </fileset>
    </copy>
    <copy todir="${war.dir}/WEB-INF/lua" includeEmptyDirs="false" >
      <fileset dir="../aelua/lua">  <exclude name="**/.svn/**"/> </fileset>
    </copy>
    <copy todir="${war.dir}/WEB-INF/lib" flatten="true" includeEmptyDirs="false">
      <fileset dir="${appengine.sdk}/lib/user"> <include name="**/*.jar"/> </fileset>
      <fileset dir="../aelua/class">            <include name="**/*.jar"/> </fileset>
    </copy>
    
    <antcall target="copy.jslua"/>
      
	<for param="file"> 
		<path> 
			<dirset dir="../aelua/mods">
				<include name="*" /> 
			</dirset>
		</path> 
		<sequential> 
			<var name="basename" unset="true"/> 
			<basename file="@{file}" property="basename"/> 
			
			<for param="file2"> 
				<path> 
					<dirset dir="../aelua/mods/${basename}">
						<include name="*" /> 
					</dirset>
				</path> 
				<sequential> 
					<var name="dirname" unset="true"/> 
					<basename file="@{file2}" property="dirname"/> 
					<copy todir="${war.dir}/${dirname}/${basename}" includeEmptyDirs="false">
					  <fileset dir="../aelua/mods/${basename}/${dirname}">
						<exclude name="**/.svn/**"/>
					  </fileset>
					</copy>
				</sequential>
			</for>
			
		</sequential> 
	</for> 

  </target>

  
  <target name="compile"
          description="Compile the application servlet code">
    <mkdir dir="${war.dir}/WEB-INF/classes"/>
    <mkdir dir="${war.dir}/WEB-INF/lib"/>

    <javac srcdir="../aelua/java" destdir="${war.dir}/WEB-INF/classes" includeantruntime="false" debug="on">
      <classpath>
		<fileset dir="../aelua/class">
		  <include name="**/*.jar" />
		</fileset>
		<fileset dir="${war.dir}/WEB-INF/lib">
		  <include name="**/*.jar" />
		</fileset>
        <fileset dir="${appengine.sdk}/lib">
          <include name="**/*.jar"/>
          <exclude name="tools/**"/>
        </fileset>
      </classpath>
    </javac>
  </target>

  <target name="clean"
          description="Force a clean slate to rebuild">
    <delete dir="${war.dir}"/>
  </target>

  <target name="runserver" depends="war"
          description="Run the dev_appserver">
    <dev_appserver war="${war.dir}" port="${http.port}"/>
  </target>

  <target name="dev_appserver" depends="runserver"/>


  <target name="debug" depends="war" 
          description="Launches dev_appserver with remote debugging enabled">
    <echo message="Launching dev_appserver on Web port ${http.port}, Java remote debug port ${debug.port}"/>
    <dev_appserver war="${war.dir}" port="${http.port}">
      <options>
        <arg value="--jvm_flag=-Xdebug"/>
        <arg value="--jvm_flag=-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=${debug.port}"/>
      </options>
    </dev_appserver>
  </target>



  <target name="update" depends="war" 
          description="Uploads the application, including indexes">
    <appcfg action="update" war="${war.dir}"/>
  </target>

  <target name="update_indexes" depends="war" 
          description="Uploads only the application's indexes">
    <appcfg action="update_indexes" war="${war.dir}"/>
  </target>

  <target name="rollback" depends="war" 
          description="Rolls back any in-progress application update">
    <appcfg action="rollback" war="${war.dir}"/>
  </target>

  <target name="request_logs" 
          description="Downloads the application's logs">
    <appcfg action="request_logs" war="${war.dir}">
      <options>
        <arg value="--num_days=${log.days}"/>
      </options>
      <args>
        <arg value="${log.file}"/>
      </args>
    </appcfg>
  </target>

  <target name="bake" depends="war"/>
  <target name="serv" depends="runserver"/>
  <target name="upload" depends="update"/>

</project>
