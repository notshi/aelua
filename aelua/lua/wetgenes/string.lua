local string=stringlocal table=tablelocal type=typelocal pairs=pairslocal ipairs=ipairs---- Some ueful string functions.--module("wetgenes.string")--------------------------------------------------------------------------------- split a string into a table, flag disables patterns on true-------------------------------------------------------------------------------function str_split(div,str,flag)  if (div=='') or not div then error("div expected", 2) end  if (str=='') or not str then error("str expected", 2) end    local pos,arr = 0,{}    -- for each divider found  for st,sp in function() return string.find(str,div,pos,not flag) end do	table.insert(arr,string.sub(str,pos,st-1)) -- Attach chars left of current divider	pos = sp + 1 -- Jump past current divider  end    if pos~=0 then	table.insert(arr,string.sub(str,pos)) -- Attach chars right of last divider  else	table.insert(arr,str) -- return entire string  end      return arrend--------------------------------------------------------------------------------- serialize a simple table to a lua string that would hopefully recreate said table if executed---- returns a string-------------------------------------------------------------------------------function serialize(o,fout)	if not fout then -- call with a new function to build and return a string			local ret=""		fout=function(s) ret=ret..s end		serialize(o,fout)				return ret		end	if type(o) == "number" then			return fout(o)			elseif type(o) == "boolean" then			if o then return fout("true") else return fout("false") end			elseif type(o) == "string" then			return fout(string.format("%q", o))			elseif type(o) == "table" then			fout("{\n")				local maxi=0				for k,v in ipairs(o) do -- dump number keys in order			fout("  [")			serialize(k,fout)			fout("] = ")			serialize(v,fout)			fout(",\n")			maxi=k -- remember top		end				for k,v in pairs(o) do			if (type(k)~="number") or (k<1) or (k>maxi) then -- skip what we already dumped				fout("  [")				serialize(k,fout)				fout("] = ")				serialize(v,fout)				fout(",\n")			end		end				return fout("}\n")	else		error("cannot serialize a " .. type(o))	end	end--------------------------------------------------------------------------------- join a table of things into an english list with commas and an "and" at the end-- returns nil if the table is empty-------------------------------------------------------------------------------function str_join_english_list(t)local s	for i,v in ipairs(t) do			if not s then -- first					s=v					elseif t[i+1]==nil then -- last					s=s.." and "..v					else -- middle					s=s..", "..v					end		end	return send--------------------------------------------------------------------------------- convert a string into a hex string-------------------------------------------------------------------------------function str_to_hex(s)	return string.gsub(s, ".", function (c)		return string.format("%02x", string.byte(c))	end)end--------------------------------------------------------------------------------- replace any %xx with the intended char, eg "%20" becomes a " "-------------------------------------------------------------------------------function url_decode(str)    return string.gsub(str, "%%(%x%x)", function(hex)        return string.char(tonumber(hex, 16))    end)end--------------------------------------------------------------------------------- replace % , & and = chars with %xx codes-------------------------------------------------------------------------------function url_encode(str)    return string.gsub(str, "([&=%%])", function(c)        return string.format("%%%02x", string.byte(c))    end)--  return strend--------------------------------------------------------------------------------- trime whitespace from ends of string-------------------------------------------------------------------------------function trim(s)  return (s:gsub("^%s*(.-)%s*$", "%1"))end