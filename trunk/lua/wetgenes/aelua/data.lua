local Json=require("Json")local pairs=pairslocal core=require("wetgenes.aelua.data.core")module("wetgenes.aelua.data")function keyinfo(keystr)	return core.keyinfo(keystr)endfunction keystr(kind,id,parent)	return core.keystr(kind,id,parent)endfunction put(ent)	return core.put(ent)endfunction get(ent)	return core.get(ent)endfunction query(q)	return core.query(q)end--------------------------------------------------------------------------------- build cache which is a mixture of decoded json vars (this may contain sub tables)-- overiden by database props which do not contain tables but are midly searchable-- props.json should contain this json data string on input-- cache will be a filled in table to be used instead of props---- No sure if this is more compact than just creating many real key/value pairs-- but it feels like a better way to organize. :)---- At leat it is a bit more implicit about what can and cannot be searched for.-------------------------------------------------------------------------------function build_cache(v)	if v.props.json then -- expand the json data			v.cache=Json.Decode(v.props.json)			else			v.cache={}		end	for ii,vv in pairs(v.props) do -- override			v.cache[ii]=vv	end		end